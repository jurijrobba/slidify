lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
1
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
load(shuttle)
data(shuttle)
glm(auto~wind, family=binomial, data = shuttle)
names(shuttle)
glm(use~wind, family=binomial, data = shuttle)
anova(glm(use~wind, family=binomial, data = shuttle))
summary(shuttle)
anova(glm(use~wind, family=binomial, data = shuttle))
anova(glm(use~wind, family=binomial, data = shuttle), test="Chisq")
summary(shuttle)
count(shuttle$wind[shuttle$wind=="head"])
length(shuttle$wind[shuttle$wind=="head"])
length(shuttle$wind[shuttle$wind=="head" && shuttle$use == "auto"]) / length(shuttle$wind[shuttle$wind=="head" && shuttle$use == "noauto"])
length(shuttle$wind[shuttle$wind=="head" && shuttle$use == "noauto"])
shuttle[shuttle$use == "noauto",]
shuttle$wind=="head" && shuttle$use == "noauto"
length(shuttle$wind[shuttle$wind=="head" && shuttle$use == "auto"]) / length(shuttle$wind[shuttle$wind=="head" & shuttle$use == "noauto"])
length(shuttle$wind[shuttle$wind=="head" & shuttle$use == "auto"]) / length(shuttle$wind[shuttle$wind=="tail" & shuttle$use == "auto"])
anova(glm(use~wind, family=binomial, data = shuttle), glm(use~wind+magn, family=binomial, data = shuttle), test="Chisq")
x<-glm(use~wind, family=binomial, data = shuttle)
exp(cbind(coef(x), confint(x)))
x<-glm(use~wind+magn, family=binomial, data = shuttle)
exp(cbind(coef(x), confint(x)))
data(InsectSprays)
summary(InsectSprays)
x<-glm(count~spray, family='poisson', data = InsectSprays)
x
summary(x)
exp(0.05588)
exp(2.67415)/exp(0.05588)
coef(x)
1713
1&13
1/13
x<-glm(count~factor(spray), family='poisson', data = InsectSprays)
summary(x)
exp(coef(x)[1])
x<-sum(InsectSprays$count[InsectSprays$spray=="sprayA"]) / length(InsectSprays$count[InsectSprays$spray=="sprayA"])
y<-sum(InsectSprays$count[InsectSprays$spray=="sprayB"]) / length(InsectSprays$count[InsectSprays$spray=="sprayB"])
x/y
y
x
InsectSprays$spray=="sprayA"
summary(InsectSprays)
x<-sum(InsectSprays$count[InsectSprays$spray=="A"]) / length(InsectSprays$count[InsectSprays$spray=="A"])
y<-sum(InsectSprays$count[InsectSprays$spray=="B"]) / length(InsectSprays$count[InsectSprays$spray=="B"])
x/y
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
?piecewise.linear
library(SiZer)
install.packages('SiZer')
library(SiZer)
piecewise.linear(x, y, middle = 0)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
N <- 40 # number of sampled points
K <- 5  # number of knots
piece.formula <- function(var.name, knots) {
formula.sign <- rep(" - ", length(knots))
formula.sign[knots < 0] <- " + "
paste(var.name, "+",
paste("I(pmax(", var.name, formula.sign, abs(knots), ", 0))",
collapse = " + ", sep=""))
}
knots <- 0
model <- lm(formula(paste("y ~", piece.formula("x", knots))))
par(mar = c(4, 4, 1, 1))
plot(x, y)
lines(x, f(x))
new.x <- seq(min(x), max(x) ,len = 10000)
points(new.x, predict(model, newdata = data.frame(x = new.x)),
col = "red", pch = ".")
points(knots, predict(model, newdata = data.frame(x = knots)),
col = "red", pch = 18)
model
library(AppliedPredictiveModeling)
install.packages('carrot')
install.packages('caret')
?createDataPartition
install.packages(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
?createDataPartition
library(AppliedPredictiveModeling)
?createDataPartition
library('caret')
?createDataPartition
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
adData = adData[1:6,]
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
adData
adData = data.frame(diagnosis,predictors)
adData = adData[1:6,1:3]
adData
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
trainIndex = createDataPartition(diagnosis[1:6], p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
testing
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
testing
training
dim(training)
dim(testing)
trainIndex
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength))
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = training$FlyAsh)
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = cut2(training$FlyAsh))
install.packages('Hmisc')
library('Hmisc')
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = cut2(training$FlyAsh))
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = cut2(Age))
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = cut2(training$Age))
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = cut2(training$Cement))
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = cut2(training$BlastFurnaceSlag))
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = cut2(training$Water))
plot(training$CompressiveStrength, 1:length(training$CompressiveStrength), col = cut2(training$Superplasticizer))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
ibrary(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData <- adData[,grepl("LI", names(adData))]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
adData
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData <- adData[,grepl("IL", names(adData))]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
adData
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[,grepl("IL", names(adData))]
?preProcess
preProcess(training, thresh = 0.9)
dim(preProcess(training, thresh = 0.9))
preProcess(training, thresh = 0.9)
preProcess(training, method="pca", thresh = 0.9)
training <- training[, c(grepl("IL", names(adData)), "diagnosis")]
training <- training[, c(grepl("IL", names(adData)), "diagnosis")]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[, c(grepl("IL", names(adData)), "diagnosis")]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
diagnosis <- training$diagnosis;
training <- training[, grepl("IL", names(adData))]
training$diagnosis <- diagnosis
?train
train(training, method= "glm", preProcess(training, method="pca", thresh = 0.8))
train(training, method= "glm", preProcess = preProcess(training, method="pca", thresh = 0.8))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
diagnosis <- training$diagnosis;
training <- training[, grepl("IL", names(adData))]
train(training,diagnosis method= "glm", preProcess = preProcess(training, method="pca", thresh = 0.8))
train(training,diagnosis, method= "glm", preProcess = preProcess(training, method="pca", thresh = 0.8))
train(training,diagnosis, method= "glm", preProcess(training, method="pca", thresh = 0.8))
train(training,diagnosis, method= "glm", preProcess(method="pca", thresh = 0.8))
train(training,diagnosis, method= "glm", preProcess(training, method="pca", thresh = 0.8))
train(training,diagnosis, method= "glm", preProcess="pca", thresh = 0.8))
train(training,diagnosis, method= "glm", preProcess="pca", thresh = 0.8)
install.packages('e1071')
train(training,diagnosis, method= "glm", preProcess="pca", thresh = 0.8)
training
diagnosis
train(training,dummyVars(diagnosis), method= "glm", preProcess="pca", thresh = 0.8)
dummyVars(diagnosis)
train(training,dummyVars(diagnosis), method= "glm", preProcess="pca", thresh = 0.8)
dummyVars(diagnosis)[,1]
train(training,as.numeric(diagnosis), method= "glm", preProcess="pca", thresh = 0.8)
as.numeric(diagnosis)
train(training,as.numeric(diagnosis)-1, method= "glm", preProcess="pca", thresh = 0.8)
installed.packages(AppliedPredictiveModeling)
installed.packages('AppliedPredictiveModeling')
installed.packages('caret')
install.packages('AppliedPredictiveModeling')
install.packages('caret')
install.packages('ElemStatLearn')
install.packages('pgmm')
install.packages('rpart')
update.packages()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
segmentationOriginal$Case
train <-segmentationOriginal[segmentationOriginal$Case == 'Train',]
train
test <-segmentationOriginal[segmentationOriginal$Case == 'Test',]
head(test)
fit <- train(Class~.,method="rpart",data=train)
plot(fit)
summary(fit)
library('rpart.plot')
install.packages('rpart.plot')
library('rpart.plot')
rpart.plot(fit)
test
test[1,]$TotalIntenCh2 <- 23000
test[1,]$FiberWidthCh1 <- 10
test[1,]$TotalIntenCh2 <- 23000
test[1,]$FiberWidthCh1 <- 10
test[1,]$PerimStatusCh1 <- 2
predict(fit, test[1,])
test[1,]$TotalIntenCh2 <- 50000
test[1,]$FiberWidthCh1 <- 10
test[1,]$PerimStatusCh1 <- 100
predict(fit, test[1,])
test[1,]$TotalIntenCh2 <- 57000
test[1,]$FiberWidthCh1 <- 8
test[1,]$PerimStatusCh1 <- 100
predict(fit, test[1,])
test[1,]$TotalIntenCh2 <- 8
test[1,]$FiberWidthCh1 <- 10
test[1,]$VarIntenCh4 <- 100
predict(fit, test[1,])
test[1,]$TotalIntenCh2 <- 50000
test[1,]$FiberWidthCh1 <- 10
test[1,]$VarIntenCh4 <- 100
predict(fit, test[1,])
test[1,]$TotalIntenCh2 <- 57000
test[1,]$FiberWidthCh1 <- 8
test[1,]$VarIntenCh4 <- 100
predict(fit, test[1,])
test[1,]$TotalIntenCh1 <- 8
test[1,]$VarIntenCh4 <- 100
test[1,]$PerimStatusCh1 <- 2
predict(fit, test[1,])
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(train)
names(SAheart)
fit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl)
fit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data = trainSA)
fit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, method = 'glm', family="binomial", data = trainSA)
fit<-train(as.factor(chd)~age+alcohol+obesity+tobacco+typea+ldl, method = 'glm', family="binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
names(SAheart)
?SAheart
missClass(trainSA$chd, predict(fit, trainSA))
fit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, method = 'glm', family="binomial", data = trainSA)
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- train(area~., data = olive)
names(olive)
fit <- train(Area~., data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(fit, newdata)
olive$Area
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y<-as.factor(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
vowel.train$y<-as.factor(vowel.train$y)
set.seed(33833)
fit<-train(y~., data=vowel.train)
?varimp
?varImp
?varImp
varImp(fit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.train$y<-as.factor(vowel.train$y)
set.seed(33833)
fit<-train(y~., data=vowel.train)
varImp(fit)
library('caret')
?train
?invisible
hdda <- invisible(train(classe~., data = initial_training, preProcess = 'knnImpute', method='hdda', na.action='na.pass'))
# Chunk 1: libraries
library('caret')
# Chunk 2: download
site = 'https://d396qusza40orc.cloudfront.net/predmachlearn'
download.file(paste0(site,'/pml-training.csv'), 'pml-training.csv', method='curl')
download.file(paste0(site,'/pml-testing.csv'), 'pml-testing.csv', method='curl')
# Chunk 3: reading
training <- read.csv('pml-training.csv', row.names = 1)
testing <- read.csv('pml-testing.csv', row.names = 1)
# Chunk 4: remove_near_0_var
mostly_null <- sapply(training, function(x){sum(is.na(x))/length(x) > 0.5 })
training <- training[,!mostly_null]
testing <- testing[,!mostly_null]
near_0_var <- nearZeroVar(training)
training<-training[,-near_0_var]
testing<- testing[,-near_0_var]
# Chunk 5: correlation
correlated <- findCorrelation(cor(training[,sapply(training, class) %in% c('integer', 'numeric')]), cutoff = 0.7, names=TRUE)
training<- training[,-which(names(testing) %in% correlated)]
testing<- testing[,-which(names(testing) %in% correlated)]
# Chunk 6: data_separation
idx<-sample(1:nrow(training), 0.6* nrow(training),replace = FALSE)
initial_training <- training[idx,]
verification <- training[-idx,]
# Chunk 7: training
hdda <- train(classe~., data = initial_training, preProcess = 'knnImpute', method='hdda', na.action='na.pass', trace = FALSE)
sum(predict(hdda, verification) == verification$classe)/nrow(verification)
RFlda <- train(classe~., data = initial_training, preProcess = 'knnImpute', method='RFlda', na.action='na.pass')
sum(predict(RFlda, verification) == verification$classe)/nrow(verification)
RFlda <- train(classe~., data = initial_training, preProcess = 'knnImpute', method='RFlda', na.action='na.pass')
hdda <- train(classe~., data = initial_training, preProcess = 'knnImpute', method='hdda', na.action='na.pass', trace = FALSE)
garbage <- capture.output(hdda <- train(classe~., data = initial_training, preProcess = 'knnImpute', method='hdda', na.action='na.pass'))
?library
predict(hdda, testing)
predict(RFlda, testing)
predict(RFlda, testing)
predict(hdda, testing)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
install.packages('manipulate')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages('rCharts')
install.packages('rCharts')
install.packages('devtools')
require(devtools)
install_github('rCharts', 'ramnathv')
install_github('ramnathv/rCharts ')
devtools::install_github('ramnathv/rCharts ')
library('rCharts')
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE)print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
shiny::runApp('Projects/DaysSince')
?mtcars
runApp('Projects/DaysSince')
mtcars$vs
mtcars$am
runApp('Projects/DaysSince')
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv"
)
library(slidify)
author('mtcars data')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")ž
slidify("index.Rmd")ž
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
